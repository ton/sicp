(define (expmod base e m)
  (define (non-trivial-sqrt-check i m s)
    (if (or (= i 1) (= i (- m 1)))
        s
        (if (= s 1) 0 s)))
  (define (miller-rabin-remainder i m)
    (non-trivial-sqrt-check i m (remainder (square i) m)))
  (cond ((= e 0) 1)
        ((even? e)
         (miller-rabin-remainder (expmod base (/ e 2) m) m))
        (else
          (remainder (* base (expmod base (- e 1) m)) m))))

(define (expmod-fermat base exp m)
  (cond ((= exp 0) 1)
        ((even? exp)
         (remainder (square (expmod-fermat base (/ exp 2) m)) m))
        (else
         (remainder (* base (expmod-fermat base (- exp 1) m)) m))))

(define (fermat-test n)
  (define (try-it a)
    (= (expmod-fermat a n n) a))
  (try-it (+ 1 (random (- n 1)))))

(define (miller-rabin-test n)
  (define (try-it a)
    (= (expmod a (- n 1) n) 1))
  (try-it (+ 1 (random (- n 1)))))

(define (fast-prime-fermat? n times)
  (cond ((= times 0) true)
        ((fermat-test n) (fast-prime-fermat? n (- times 1)))
        (else false)))

(define (fast-prime-miller-rabin? n times)
  (cond ((= times 0) true)
        ((miller-rabin-test n) (fast-prime-miller-rabin? n (- times 1)))
        (else false)))

(display "9: ")
(display (fast-prime-miller-rabin? 9 100))
(newline)
(display "10: ")
(display (fast-prime-miller-rabin? 10 100))
(newline)
(display "13: ")
(display (fast-prime-miller-rabin? 13 100))
(newline)
(display "97: ")
(display (fast-prime-miller-rabin? 97 100))
(newline)
(display "561: ")
(display (fast-prime-miller-rabin? 561 100))
(newline)
(display "1001: ")
(display (fast-prime-miller-rabin? 1001 100))
(newline)
